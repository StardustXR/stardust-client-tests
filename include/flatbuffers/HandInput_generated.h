// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HANDINPUT_STARDUSTXR_H_
#define FLATBUFFERS_GENERATED_HANDINPUT_STARDUSTXR_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace StardustXR {

struct Hand;
struct HandBuilder;

struct Hand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HandBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FINGER_JOINTS = 4,
    VT_PALM = 6,
    VT_WRIST = 8,
    VT_ELBOW = 10
  };
  const flatbuffers::Vector<const StardustXR::joint *> *finger_joints() const {
    return GetPointer<const flatbuffers::Vector<const StardustXR::joint *> *>(VT_FINGER_JOINTS);
  }
  const StardustXR::joint *palm() const {
    return GetStruct<const StardustXR::joint *>(VT_PALM);
  }
  const StardustXR::joint *wrist() const {
    return GetStruct<const StardustXR::joint *>(VT_WRIST);
  }
  const StardustXR::joint *elbow() const {
    return GetStruct<const StardustXR::joint *>(VT_ELBOW);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FINGER_JOINTS) &&
           verifier.VerifyVector(finger_joints()) &&
           VerifyFieldRequired<StardustXR::joint>(verifier, VT_PALM) &&
           VerifyFieldRequired<StardustXR::joint>(verifier, VT_WRIST) &&
           VerifyField<StardustXR::joint>(verifier, VT_ELBOW) &&
           verifier.EndTable();
  }
};

struct HandBuilder {
  typedef Hand Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_finger_joints(flatbuffers::Offset<flatbuffers::Vector<const StardustXR::joint *>> finger_joints) {
    fbb_.AddOffset(Hand::VT_FINGER_JOINTS, finger_joints);
  }
  void add_palm(const StardustXR::joint *palm) {
    fbb_.AddStruct(Hand::VT_PALM, palm);
  }
  void add_wrist(const StardustXR::joint *wrist) {
    fbb_.AddStruct(Hand::VT_WRIST, wrist);
  }
  void add_elbow(const StardustXR::joint *elbow) {
    fbb_.AddStruct(Hand::VT_ELBOW, elbow);
  }
  explicit HandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Hand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Hand>(end);
    fbb_.Required(o, Hand::VT_FINGER_JOINTS);
    fbb_.Required(o, Hand::VT_PALM);
    fbb_.Required(o, Hand::VT_WRIST);
    return o;
  }
};

inline flatbuffers::Offset<Hand> CreateHand(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const StardustXR::joint *>> finger_joints = 0,
    const StardustXR::joint *palm = 0,
    const StardustXR::joint *wrist = 0,
    const StardustXR::joint *elbow = 0) {
  HandBuilder builder_(_fbb);
  builder_.add_elbow(elbow);
  builder_.add_wrist(wrist);
  builder_.add_palm(palm);
  builder_.add_finger_joints(finger_joints);
  return builder_.Finish();
}

inline flatbuffers::Offset<Hand> CreateHandDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<StardustXR::joint> *finger_joints = nullptr,
    const StardustXR::joint *palm = 0,
    const StardustXR::joint *wrist = 0,
    const StardustXR::joint *elbow = 0) {
  auto finger_joints__ = finger_joints ? _fbb.CreateVectorOfStructs<StardustXR::joint>(*finger_joints) : 0;
  return StardustXR::CreateHand(
      _fbb,
      finger_joints__,
      palm,
      wrist,
      elbow);
}

}  // namespace StardustXR

#endif  // FLATBUFFERS_GENERATED_HANDINPUT_STARDUSTXR_H_
