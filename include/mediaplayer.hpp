
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__mediaplayer_hpp__proxy__H__
#define __sdbuscpp__mediaplayer_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace mpris {
namespace MediaPlayer2 {

class Player_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.mpris.MediaPlayer2.Player";

protected:
    Player_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
        proxy_.uponSignal("Seeked").onInterface(INTERFACE_NAME).call([this](const int64_t& Position){ this->onSeeked(Position); });
    }

    ~Player_proxy() = default;

    virtual void onSeeked(const int64_t& Position) = 0;

public:
    void Next()
    {
        proxy_.callMethod("Next").onInterface(INTERFACE_NAME);
    }

    void Previous()
    {
        proxy_.callMethod("Previous").onInterface(INTERFACE_NAME);
    }

    void Pause()
    {
        proxy_.callMethod("Pause").onInterface(INTERFACE_NAME);
    }

    void PlayPause()
    {
        proxy_.callMethod("PlayPause").onInterface(INTERFACE_NAME);
    }

    void Stop()
    {
        proxy_.callMethod("Stop").onInterface(INTERFACE_NAME);
    }

    void Play()
    {
        proxy_.callMethod("Play").onInterface(INTERFACE_NAME);
    }

    void Seek(const int64_t& Offset)
    {
        proxy_.callMethod("Seek").onInterface(INTERFACE_NAME).withArguments(Offset);
    }

    void SetPosition(const sdbus::ObjectPath& TrackId, const int64_t& Position)
    {
        proxy_.callMethod("SetPosition").onInterface(INTERFACE_NAME).withArguments(TrackId, Position);
    }

    void OpenUri(const std::string& Uri)
    {
        proxy_.callMethod("OpenUri").onInterface(INTERFACE_NAME).withArguments(Uri);
    }

public:
    std::string PlaybackStatus()
    {
        return proxy_.getProperty("PlaybackStatus").onInterface(INTERFACE_NAME);
    }

    std::string LoopStatus()
    {
        return proxy_.getProperty("LoopStatus").onInterface(INTERFACE_NAME);
    }

    void LoopStatus(const std::string& value)
    {
        proxy_.setProperty("LoopStatus").onInterface(INTERFACE_NAME).toValue(value);
    }

    double Rate()
    {
        return proxy_.getProperty("Rate").onInterface(INTERFACE_NAME);
    }

    void Rate(const double& value)
    {
        proxy_.setProperty("Rate").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool Shuffle()
    {
        return proxy_.getProperty("Shuffle").onInterface(INTERFACE_NAME);
    }

    void Shuffle(const bool& value)
    {
        proxy_.setProperty("Shuffle").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::map<std::string, sdbus::Variant> Metadata()
    {
        return proxy_.getProperty("Metadata").onInterface(INTERFACE_NAME);
    }

    double Volume()
    {
        return proxy_.getProperty("Volume").onInterface(INTERFACE_NAME);
    }

    void Volume(const double& value)
    {
        proxy_.setProperty("Volume").onInterface(INTERFACE_NAME).toValue(value);
    }

    int64_t Position()
    {
        return proxy_.getProperty("Position").onInterface(INTERFACE_NAME);
    }

    double MinimumRate()
    {
        return proxy_.getProperty("MinimumRate").onInterface(INTERFACE_NAME);
    }

    double MaximumRate()
    {
        return proxy_.getProperty("MaximumRate").onInterface(INTERFACE_NAME);
    }

    bool CanGoNext()
    {
        return proxy_.getProperty("CanGoNext").onInterface(INTERFACE_NAME);
    }

    bool CanGoPrevious()
    {
        return proxy_.getProperty("CanGoPrevious").onInterface(INTERFACE_NAME);
    }

    bool CanPlay()
    {
        return proxy_.getProperty("CanPlay").onInterface(INTERFACE_NAME);
    }

    bool CanPause()
    {
        return proxy_.getProperty("CanPause").onInterface(INTERFACE_NAME);
    }

    bool CanSeek()
    {
        return proxy_.getProperty("CanSeek").onInterface(INTERFACE_NAME);
    }

    bool CanControl()
    {
        return proxy_.getProperty("CanControl").onInterface(INTERFACE_NAME);
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif
